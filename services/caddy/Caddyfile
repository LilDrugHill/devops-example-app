# Домены, которые будет обслуживать Caddy
# Первый домен для локальной разработки, второй для продакшена (воображаемого)
localhost, devops-example.test {
    # Формируем самоподписной сертификат для работы https
    tls passthrough
    

    # Отдаем картинки напрямую из файловой системы минуя приложение
    # Картинки в нашем проекте хранятся в /app/public внутри образа с Caddy
    # Выше в Dockerfile мы туда их копируем
    # /images/app.png => /app/public/images/app.png
    handle /images/* {
        file_server
        root * /app/public
    }
    reverse_proxy {
        to app:3000

        @error status 502 # Только 502 ошибки
        handle_response @error {
            # Путь по которому хранятся html-файлы для разных ошибок
            root * /app/services/caddy/error_pages
            # Для всех 502 запросов отдаем файл 502.html
            # Имя произвольное
            rewrite * /502.html
            file_server
        }
}
# Все остальные запросы передаются в приложение
# handle {
    # app - имя домена во внутренней сети Docker
    # В девелопменте совпадает с именем сервиса в docker-compose.yml
    # Для продакшена надо будет создать общую сеть
#    reverse_proxy app:3000
# }

    # Включаем логгирование для удобной отладки
    log {
        format json
    }
}
# Для вывода сообщения во время обновления или падения сервера
# Caddy


# Nginx
# Имя файла произвольное
# error_page 502 /502.html;
# location = /502.html {
#   root /path/to/files/with/html;
#   internal;
# }

# handle {
#     # Добавляем столько серверов, сколько нужно
#     reverse_proxy app:3000
# }

# Nginx
# http {
#     server {
#         location / {
        # Запрос перенаправляется на upstream backend
#             proxy_pass http://backend;
#         }
#     }
#     upstream backend {
    # Добавляем столько серверов, сколько нужно
#         server app1;
#         server app2;
#         server app3;
#     }
# }